"""
M√≥dulo respons√°vel pelos relat√≥rios financeiros.
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from transactions_db import view_transactions
from transactions_analysis import get_balance, get_monthly_summary
from theme_manager import init_theme_manager, theme_config_section, get_theme_colors, apply_theme_to_plotly_chart

def show_reports():
    """Mostra os relat√≥rios financeiros"""
    st.title("üìä Relat√≥rios")
    
    # Inicializar o gerenciador de tema
    init_theme_manager()
    
    # Mostrar configura√ß√£o de tema
    theme_config_section()
    
    # Obter transa√ß√µes
    transactions = view_transactions()
    
    if not transactions:
        st.warning("Nenhuma transa√ß√£o encontrada para gerar relat√≥rios.")
        return
    
    # Converter para DataFrame
    df = pd.DataFrame(transactions)
    df['date'] = pd.to_datetime(df['date'])
    
    # Tabs para diferentes relat√≥rios
    tab1, tab2, tab3 = st.tabs(["üìà Vis√£o Geral", "üí∞ Fluxo de Caixa", "üìä Categorias"])
    
    with tab1:
        show_overview(df)
    
    with tab2:
        show_cash_flow(df)
    
    with tab3:
        show_category_analysis(df)

def show_overview(df):
    """Mostra vis√£o geral das finan√ßas"""
    st.subheader("Vis√£o Geral")
    
    # M√©tricas principais
    balance = get_balance()
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Saldo em Conta", f"R$ {balance['saldo_conta']:,.2f}")
    
    with col2:
        st.metric("Total Investido", f"R$ {balance['total_investido']:,.2f}")
    
    with col3:
        st.metric("Patrim√¥nio Total", f"R$ {balance['patrimonio_total']:,.2f}")
    
    # Gr√°fico de pizza por tipo de transa√ß√£o
    st.subheader("Distribui√ß√£o por Tipo")
    df_type = df.groupby('type')['amount'].sum()
    
    fig = px.pie(
        values=df_type.values,
        names=df_type.index,
        title='Distribui√ß√£o por Tipo de Transa√ß√£o'
    )
    apply_theme_to_plotly_chart(fig)
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabela com resumo
    st.subheader("Resumo por Tipo")
    summary_df = pd.DataFrame({
        'Tipo': df_type.index,
        'Valor Total': df_type.values,
        'Quantidade': df.groupby('type').size(),
        'M√©dia': df.groupby('type')['amount'].mean()
    })
    summary_df['Valor Total'] = summary_df['Valor Total'].apply(lambda x: f"R$ {x:,.2f}")
    summary_df['M√©dia'] = summary_df['M√©dia'].apply(lambda x: f"R$ {x:,.2f}")
    st.dataframe(summary_df)

def show_cash_flow(df):
    """Mostra an√°lise do fluxo de caixa"""
    st.subheader("Fluxo de Caixa")
    
    # Seletor de per√≠odo
    period = st.selectbox(
        "Per√≠odo",
        ["√öltimos 30 dias", "Este m√™s", "M√™s anterior", "√öltimos 3 meses", "Todo per√≠odo"]
    )
    
    # Filtrar dados pelo per√≠odo selecionado
    today = pd.Timestamp.now()
    if period == "√öltimos 30 dias":
        df = df[df['date'] >= (today - pd.Timedelta(days=30))]
    elif period == "Este m√™s":
        df = df[df['date'].dt.month == today.month]
    elif period == "M√™s anterior":
        last_month = today.month - 1 if today.month > 1 else 12
        df = df[df['date'].dt.month == last_month]
    elif period == "√öltimos 3 meses":
        df = df[df['date'] >= (today - pd.Timedelta(days=90))]
    
    # Gr√°fico de linha temporal
    df_daily = df.groupby(['date', 'type'])['amount'].sum().reset_index()
    
    fig = px.line(
        df_daily,
        x='date',
        y='amount',
        color='type',
        title=f'Fluxo de Caixa - {period}'
    )
    apply_theme_to_plotly_chart(fig)
    fig.update_layout(
        xaxis_title='Data',
        yaxis_title='Valor (R$)'
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Resumo do per√≠odo
    col1, col2, col3 = st.columns(3)
    
    with col1:
        receitas = df[df['type'] == 'Receita']['amount'].sum()
        st.metric("Total Receitas", f"R$ {receitas:,.2f}")
    
    with col2:
        despesas = df[df['type'] == 'Despesa']['amount'].sum()
        st.metric("Total Despesas", f"R$ {despesas:,.2f}")
    
    with col3:
        investimentos = df[df['type'] == 'Investimento']['amount'].sum()
        st.metric("Total Investimentos", f"R$ {investimentos:,.2f}")

def show_category_analysis(df):
    """Mostra an√°lise por categorias"""
    st.subheader("An√°lise por Categorias")
    
    # Filtro por tipo
    type_filter = st.selectbox(
        "Tipo de Transa√ß√£o",
        ["Despesa", "Receita", "Investimento"]
    )
    
    # Filtrar dados
    df_filtered = df[df['type'] == type_filter]
    
    # Gr√°fico de barras por categoria
    df_cat = df_filtered.groupby('category')['amount'].agg(['sum', 'count']).reset_index()
    df_cat.columns = ['Categoria', 'Total', 'Quantidade']
    df_cat = df_cat.sort_values('Total', ascending=True)
    
    fig = go.Figure(data=[
        go.Bar(
            x=df_cat['Total'],
            y=df_cat['Categoria'],
            orientation='h'
        )
    ])
    
    apply_theme_to_plotly_chart(fig)
    fig.update_layout(
        title=f'Total por Categoria - {type_filter}s',
        xaxis_title='Valor (R$)',
        yaxis_title='Categoria'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabela detalhada
    st.subheader(f"Detalhamento por Categoria - {type_filter}s")
    df_cat['M√©dia'] = df_cat['Total'] / df_cat['Quantidade']
    df_cat['Total'] = df_cat['Total'].apply(lambda x: f"R$ {x:,.2f}")
    df_cat['M√©dia'] = df_cat['M√©dia'].apply(lambda x: f"R$ {x:,.2f}")
    st.dataframe(df_cat)
